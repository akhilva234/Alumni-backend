generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id            Int                   @id @default(autoincrement())
  first_name         String
  last_name          String
  user_photo         String? 
  email              String                @unique
  phone_number       String
  date_of_birth      DateTime
  gender             String?
  current_address    String?
  password           String
  department_id      Int
  course_id          Int
  is_blocked         Boolean              @default(false)
  location           String?


  role            Role            @default(ALUMNI)
  marital_status  MaritalStatus   @default(Unmarried)
  approved_status     ApprovedStatus  @default(PENDING)
  academicDetails    Academic_Detail[]
   externalEducation  External_Education[]
  professionalDetails Professional_Detail[]
  course             Course                @relation(fields: [course_id], references: [course_id])
  department         Department            @relation(fields: [department_id], references: [department_id])
}

model Academic_Detail {
  academic_id        Int         @id @default(autoincrement())
  user_id            Int
  prn_number         String      @unique
  graduation_year    Int?
  degree_id          Int?
  department_id      Int?
  degree_certificate String?
  degree             Degree?     @relation(fields: [degree_id], references: [degree_id])
  department         Department? @relation(fields: [department_id], references: [department_id])
  user               User        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model External_Education {
  external_id       Int       @id @default(autoincrement())
  user_id           Int
  degree_id         Int?      
  course_name       String?   
  college_name      String? 
  start_year        Int?
  end_year          Int?

  user              User      @relation(fields: [user_id], references: [user_id])
  degree            Degree?   @relation(fields: [degree_id], references: [degree_id])
}

model Degree {
  degree_id       Int               @id @default(autoincrement())
  degree_name     String            @unique
  academicDetails Academic_Detail[]
  externalEducation External_Education[]
  courses         Course[]
}

model Department {
  department_id   Int               @id @default(autoincrement())
  department_name String            @unique

  academicDetails Academic_Detail[]
  courses         Course[]
  users           User[]
}

model Course {
  course_id     Int        @id @default(autoincrement())
  course_name   String
  course_code   String
  department_id Int
  degree_id     Int
  department    Department @relation(fields: [department_id], references: [department_id])
  degree        Degree     @relation(fields: [degree_id], references: [degree_id])

  users         User[]
}

model Professional_Detail {
  professional_id  Int       @id @default(autoincrement())
  user_id          Int
  current_position String?
  company_name     String?
  experience       Int?          @default(0)
  industry_id      Int?
  work_email       String?
  linkedin_profile String?
  instagram        String?
  key_skills       String?
  industry         Industry? @relation(fields: [industry_id], references: [industry_id])
  user             User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Industry {
  industry_id   Int                   @id @default(autoincrement())
  industry_name String                @unique
  professionals Professional_Detail[]
}

enum Role {
  ADMIN
  ALUMNI
  FACULTY
  RETD_FACULTY
}

enum ApprovedStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MaritalStatus{
  Married
  Unmarried
  Divorced
}
